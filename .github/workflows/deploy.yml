# This is a basic workflow to help you get started with Actions

name: Update Lambda Code & Configuration

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy_source:
    name: Update Lambda Functions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Package registration code
        uses: montudor/action-zip@v1.0.0
        with:
          args: zip ./register.zip ./registration.py
      - name: Package send code
        uses: montudor/action-zip@v1.0.0
        with:
          args: zip ./send.zip ./send.py
      - name: Package receive code
        uses: montudor/action-zip@v1.0.0
        with:
          args: zip ./receive.zip ./receive.py
      - name: Package acknowledge code
        uses: montudor/action-zip@v1.0.0
        with:
          args: zip ./acknowledge.zip ./acknowledge.py
      - name: Deploy registration lambda
        uses: appleboy/lambda-action@v0.1.3
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: messaging-app-register
          zip_file: register.zip
      - name: Deploy send lambda
        uses: appleboy/lambda-action@v0.1.3
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: messaging-app-send
          zip_file: send.zip
      - name: Deploy receive lambda
        uses: appleboy/lambda-action@v0.1.3
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: messaging-app-receive
          zip_file: receive.zip
      - name: Deploy acknowledge lambda
        uses: appleboy/lambda-action@v0.1.3
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: messaging-app-acknowledge
          zip_file: acknowledge.zip
      - name: Notify Lambda Updated
        if: ${{ success() }}
        uses: techulus/push-github-action@1.0.0
        env:
          API_KEY: ${{ secrets.PUSH_API_KEY }}
          MESSAGE: "Update Messaging API Lambda Functions succeeded"
          TITLE: "✅ Updated"
          LINK: "https://github.com/AaronLi/messaging-app-python"
      - name: Notify Lambda Not Updated
        if: ${{ !success() }}
        uses: techulus/push-github-action@1.0.0
        env:
          API_KEY: ${{ secrets.PUSH_API_KEY }}
          MESSAGE: "Update Messaging API Lambda Functions failed"
          TITLE: "❌ Failed"
          LINK: "https://github.com/AaronLi/messaging-app-python/actions/workflows/deploy.yml"
      
  create-new-layer-version:
    name: Create new layer version
    runs-on: ubuntu-latest

    outputs:
      new-layer-version: ${{ steps.publish-layer-step.outputs.layer-version }}
      file-changed: ${{ steps.verify-settings-changed.outputs.files_changed }}
    steps:
      - uses: actions/checkout@v2
      - name: Check config file changed
        uses: tj-actions/verify-changed-files@v7.1
        id: verify-settings-changed
        with:
          files: |
            settings.py
      - uses: actions/setup-python@v2
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
        with:
          python-version: "3.8"
      - uses: aws-actions/setup-sam@v1
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
      - uses: aws-actions/configure-aws-credentials@v1
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Move files for packaging
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
        run: mkdir python && mv settings.py python/settings.py
      - name: Package settings.py
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
        uses: montudor/action-zip@v1.0.0
        with:
          args: zip config.zip -r python/
      - name: Publish new layer version
        if: steps.verify-settings-changed.outputs.files_changed == 'true'
        id: publish-layer-step
        run: echo "::set-output name=layer-version::$( aws lambda publish-layer-version --layer-name messaging-app-settings --compatible-runtimes python3.8 --zip-file fileb://config.zip | grep '\"Version\":' | tr -d \":, | tr " " "\n" | egrep [0-9]+ )"
  update-lambdas-to-new-layer:
    name: Update lambdas to new layer
    runs-on: ubuntu-latest
    if: needs.create-new-layer-version.outputs.file-changed == 'true'
    needs: create-new-layer-version
    steps:
      - name: Update receive lambda with new layer version
        run: aws lambda update-function-configuration --function-name messaging-app-receive --layers ${{ secrets.LAYER_ARN }}:${{ needs.create-new-layer-version.outputs.new-layer-version }}
      - name: Update send lambda with new layer version
        run: aws lambda update-function-configuration --function-name messaging-app-send --layers ${{ secrets.LAYER_ARN }}:${{ needs.create-new-layer-version.outputs.new-layer-version }}
      - name: Update register lambda with new layer version
        run: aws lambda update-function-configuration --function-name messaging-app-register --layers ${{ secrets.LAYER_ARN }}:${{ needs.create-new-layer-version.outputs.new-layer-version }}
      - name: Update acknowledge lambda with new layer version
        run: aws lambda update-function-configuration --function-name messaging-app-acknowledge --layers ${{ secrets.LAYER_ARN }}:${{ needs.create-new-layer-version.outputs.new-layer-version }}
      - name: Notify Configuration Updated
        if: success()
        uses: techulus/push-github-action@1.0.0
        env:
          API_KEY: ${{ secrets.PUSH_API_KEY }}
          MESSAGE: "Update Messaging API configuration succeeded"
          TITLE: "✅ Updated layer to version ${{ needs.create-new-layer-version.outputs.new-layer-version }}"
          LINK: "https://github.com/AaronLi/messaging-app-python"
      - name: Notify Configuration Not Updated
        if: ${{ !success() }}
        uses: techulus/push-github-action@1.0.0
        env:
          API_KEY: ${{ secrets.PUSH_API_KEY }}
          MESSAGE: "Update Messaging API configuration failed"
          TITLE: "❌ Failed"
          LINK: "https://github.com/AaronLi/messaging-app-python/actions/workflows/deploy.yml"
